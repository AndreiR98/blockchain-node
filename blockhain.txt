import java.math.BigInteger;
import java.util.List;
import java.util.ArrayList;

public class CryptoMiner {

    private boolean isMining = false;
    private BigInteger nonce = BigInteger.ZERO;
    private long startTime = 0;
    private ECKey privateKey;

    public CryptoMiner(String minerPrivateKey) {
        this.privateKey = new ECKey(minerPrivateKey);
    }

    public void startMining() throws InterruptedException {
        while (true) {
            if (shouldStartMining()) {
                mineBlock();
            } else {
                isMining = false;
                Thread.sleep(1000);
            }

            if (nonce.compareTo(new BigInteger("ffffffff", 16)) > 0) {
                resetMining(); // Fix the time after reaching max nonce
            }
        }
    }

    private boolean shouldStartMining() {
        return worker.isBrokerConnected() &&
               worker.isHasDataSync() &&
               worker.isHasStateSync() &&
               (state.isMineEmptyBlocks() || !storage.getPseudoTransactions().isEmpty());
    }

    private void mineBlock() {
        ChainState state = storage.getStateTrie();
        Coin reward = state.getReward();
        Integer difficulty = state.getTarget();

        if (!isMining) {
            setupMining(); // Set startTime when mining starts
        }

        BlockMetadata newBlock;

        if (state.isMineEmptyBlocks() && storage.getPseudoTransactions().isEmpty()) {
            newBlock = generateEmptyBlock(state, reward, difficulty);
        } else {
            newBlock = generateBlock(state, reward, difficulty);
        }

        if (BlockchainUtils.computedTargetValue(newBlock.getBlock().getHash(), difficulty)) {
            processMinedBlock(newBlock);
            resetMining(); // Fix the time after mining a block
        }

        nonce = nonce.add(BigInteger.ONE);
    }

    private void setupMining() {
        isMining = true;
        nonce = BigInteger.ZERO;
        startTime = System.currentTimeMillis(); // Set the start time when mining starts
    }

    private void resetMining() {
        nonce = BigInteger.ZERO;
        startTime = System.currentTimeMillis();
    }

    private void processMinedBlock(BlockMetadata newBlock) {
        storage.addBlockMempool(newBlock.getBlock().getHash(), newBlock.getBlock());

        MessageWrapper messageWrapper = createMessageWrapper(newBlock.getBlock().getHeader());

        updateMempoolTransactions(newBlock.getMempoolTransaction());

        brokerConnectionStorage.getConnection()
            .outbound().sendObject(Mono.just(messageWrapper.serialize()))
            .then()
            .subscribe();

        isMining = false;
    }

    // Other methods as before

    public static void main(String[] args) throws InterruptedException {
        CryptoMiner miner = new CryptoMiner(minerPrivateKey);
        miner.startMining();
    }
}
